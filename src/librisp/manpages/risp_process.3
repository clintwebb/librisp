.\" man page for librisp
.\" Contact webb.clint@gmail.com to correct errors or omissions. 
.TH risp_process 3 "1 September 2016" "3.20.00" "Process a RISP stream"
.SH NAME
risp_process \- Process a RISP stream.
.SH SYNOPSIS
.B #include <risp.h>
.sp
.B risp_length_t risp_process(RISP_PTR risp, void *base, risp_length_t length, const void *data);
.sp
compile with the 
.B -lrisp
option

.SH DESCRIPTION
.B risp_process() 
processes all the commands in the data buffer, returning the number of bytes processed.  If there is not enough data 
to complete the operation, then the calling function can then figure out what to do with it.  Normally data will be
loaded from a socket or file, so would run inside a loop, or triggered from an event (when new data is available on a socket)
.SH EXAMPLE
.PP
.nf
.RS
.sp
#define CMD_SEND_MSG           0x4002
.sp
typedef struct {
.br
	char *buffer;
.br
	int buflen;
.br 
	int msgid;
.br
} session_t;
.sp
void cmdSendMsg(void *base, risp_int_t value)
.br
{
.br
	// The base pointer that is passed thru the library doesnt know about the session structure we 
.br
	// are using, so we need to make a cast-pointer for it.
.br
	session_t *session = (session_t *) base;
.br
	assert(session);
.sp
	// ... do something with the 'value'
.br
	session->msgid = value;
.br
}
.sp
void main(void) {
.br
	int leave = 0;
.sp
	RISP_PTR risp = risp_init();
.sp
	risp_add_command(risp, CMD_SEND_MSG,			&cmdSendMsg);
.sp
	// init the session (or whatever structure you want).
.br
	session_t = calloc(1, sizeof(session_t));
.sp
	while (leave == 0) {
		// ... get a stream of risp data (from a socket, or disk, etc).
.br
		get_more_session_data(session);
.sp
		// risp_process will iterate through the stream and execute all the callbacks for each command in the stream.
.br
.B			risp_length_t processed = risp_process(risp, session, session->buflen, session->buffer);
.br
		if (processed < session->buflen) {
.br
			// we didn't process all the data in the buffer.  This means we haven't received it 
.br
			// all yet.  Move the un-processed data to the start of the buffer, and wait for the 
.br
			// rest to arrive.
.br
			session->buflen -= processed;
.br
			memmove(session->buffer, session->buffer + processed, session->buflen);
.br
		}
.br
		else {
.br
			session->buflen = 0;
.br	
		}
.br
	}
.br
}
.sp
.RE
.fi
.PP
.SH SEE ALSO
.BR risp_init (3),
.BR risp_add_invalid (3),
.BR risp_add_command (3)
.SH AUTHOR
.nf
Clint Webb (webb.clint@gmail.com)
.br
http://risp.rhokz.com/
.fi
