----------------------------------------------------------------------------------------------------
WHAT IS THIS LIBRARY?

This library will provide the low-level interraction for the protocol.  It will not handle the transport, or the events system.  Instead it will merely accumulate the data from a handle, and then fire off data to call-back functions when it has enough.

----------------------------------------------------------------------------------------------------
WHAT IS RISP?

Reduced Instruction Set Protocol follows a similar philosophy as RISC for CPU's.   This philosophy generally follows that a data protocol should be made up of smaller very simple operations.  When put together, they can perform complicated operations.  Many of these simple operations could be something small like "Store this data in a variable", and another operation could be "Perform some operation using the data stored in a particular variable"

A psuedo representation of a complex operation made up of smaller operations might be.

	USERNAME <string>
	PASSWORD <string>
	LOGIN

The above example is 3 seperate operations when put together perform a single complex operation.  The USERNAME operation would simply store that value in a Username variable for the session.  The PASSWORD operation would do a similar thing, just store the value.  The LOGIN command though, triggers some activity where it looks at the Username and Password values that were stored for the session and does something with it, returning a result.

----------------------------------------------------------------------------------------------------
BREAKDOWN OF BINARY PROTOCOL

Each operation is made up of a Command, an optional Integer, followed by an optional binary stream.  
When optional, the highest 4 bits in the command ID indicate what parameters follow.
The command is a 2-byte integer (16-bit, network-byte-ordered).
The highest 4 bits of the command is a bitmask which indicates what kind of data will follow the command.

The first bit (highest bit) will indicate if the parameter is a string or not.  
 - 0 indicating that the parameter is an integer.  
 - 1 indicating that the parameter will be an integer length, followed by how ever many bytes was it indicated.

The next 3 bits of the first byte in the command, will indicate how many bytes that next param will be.  


   
   0 000 xxxxxxxxxxxx - indicates a 1-byte integer follows (char).  
   0 001 xxxxxxxxxxxx - indicates a 2-byte integer follows (short).
   0 010 xxxxxxxxxxxx - indicates a 4-byte integer follows (int).
   0 011 xxxxxxxxxxxx - indicates an 8-byte integer follows (long long).
   0 100 xxxxxxxxxxxx - indicates an 16-byte integer follows.
   0 101 xxxxxxxxxxxx - indicates an 32-byte integer follows.
   0 110 xxxxxxxxxxxx - indicates an 64-byte integer follows.
   0 111 xxxxxxxxxxxx - indicates a non-param command.
   1 000 xxxxxxxxxxxx - indicates a string, where a 1-byte length follows, and then x bytes. (max 255 bytes)
   1 001 xxxxxxxxxxxx - indicates a string, where 2-byte length follows, then x bytes (max 64kb).
   1 010 xxxxxxxxxxxx - indicates a string, where 4-byte length follows, then x bytes (max 4gb).
   1 011 xxxxxxxxxxxx - indicates a string, where 8-byte length follows, then x bytes (max ??).
   1 100 xxxxxxxxxxxx - Indicates a non-param command.
   1 101 xxxxxxxxxxxx - Indicates a non-param command.
   1 110 xxxxxxxxxxxx - Indicates a non-param command.
   1 111 xxxxxxxxxxxx - Indicates a non-param command.
   
   
   

Represented another way.


Command Style Ranges
// 1 byte integer - 0x0000 to 0x0fff         0 000 xxxx xxxx
// 2 byte integer - 0x1000 to 0x1fff         0 001 xxxx xxxx	
// 4 byte integer - 0x2000 to 0x2fff         0 010 xxxx xxxx
// 8 byte integer - 0x3000 to 0x3fff         0 011 xxxx xxxx
// 16 byte integer - 0x4000 to 0x4fff        0 100 xxxx xxxx
// 32 byte integer - 0x5000 to 0x5fff        0 101 xxxx xxxx
// 64 byte integer - 0x6000 to 0x6fff        0 110 xxxx xxxx
// No Parameters - 0x7000 to 0x7fff          0 111 xxxx xxxx
// 1 byte-length string - 0x8000 to 0x8fff   1 000 xxxx xxxx
// 2 byte-length string - 0x9000 to 0x9fff   1 001 xxxx xxxx
// 4 byte-length string - 0xa000 to 0xafff   1 010 xxxx xxxx
// 8 byte-length string - 0xb000 to 0xbfff   1 011 xxxx xxxx
// No Parameters - 0xc000 to 0xffff          1 1xx xxxx xxxx



   A command that has no params.
     1101 0000 0000 0101 - Command ID 0xD005, in the range of 0xC000 to 0xFFFF, indicates that no params follow.

   A single command with a 1 byte command.
     0000 0000 0000 0100 - Command ID 0x0004, in the range of 0x0000 to 0x0fff, Indicates a single 1-byte integer should follow.
     0010 0110           - 1 byte integer which is 46.

   A command that has a 2-byte integer.
     0001 0000 0010 0001 - Command ID 0x1021, in the range of 0x1000 to 0x1fff, indicates param will be a 2-byte int.
     1000 0001 1110 0001 - 2-byte of the integer param, which together is 33249.

   A command that has a 2-byte length string.
     1001 0000 0000 0001 - Command ID 0x9001, in the range of 0x9000 to 0x9fff, indicates param will be 2-byte length followed by binary stream of that length.
     0000 0000 0000 0100 - 2-byte integer param, value is 4.  Indicates 4 bytes follow which is the string parameter.
     0100 0001 0100 0010 - first 2 bytes of the binary stream.
     0100 0011 0100 0100 - second 2 bytes.  Total string is actually "ABCD"




-------------------------------------------------------------------------------
Advanced Protocol Handling.

To improve performance, an advanced processing system can be used.  The standard method is to provide pointers to callback routines for each command.  This is a good flexible approach, but constantly calling a function for every command recieved adds load to the processor that could be better used processing the commands.

When setting up the protocol handling, information about each expected command is supplied.  The only information required is to indicate which commands are valid, and which command is the EXECUTE command and which is the Clear command (although it will be handled like every other one).

Additionally, we would need a bitmask for each command, of commands that need to be cleared when that command is received.  (This could be how the CLEAR command is setup, or thru a callback).   For example when a SEARCH command is received, we want to clear out the SERVER command data because they conflict.

Rather than a bitmask, it would probably be faster to process an array of commands (delimited by a NOP).

A special structure is created that keeps all this information, and it is passed to the risp library when processing is needed.  This means that the library itself does not keep any information.

This means that the processing becomes more complicated, but hopefully is faster.

The fully-callback oriented system could process about 150mb of data per second, with almost 1 million operations per second being processed.  This new system should be able to do twice that amount of data.

 ***  After thinking about how to implement this, I have determined that what 
 ***  little CPU is saved as each command comes in, would be lost (and some) 
 ***  when trying to process the EXECUTE command.  Because it would have to 
 ***  loop through the data structures provided (256 times actually) to 
 ***  determine what commands have been received and what needs to be processed.   
 ***  Using the callback method though, would mean that as the callbacks come 
 ***  in, a particular flag entry can be kept which can keep track of the most 
 ***  recent action command received.   So even though we are making a function 
 ***  call for every peice of data returned, it keeps things simple.   I may 
 ***  ressurect and attempt this idea in the future after I think about it for 
 ***  a while and try to determine if there is a good way of processing the 
 ***  data.


-------------------------------------------------------------------------------




